%{
  #include "msg.h"
  #include "tmctime.h"
%}

State Init {
  > Telemetry Start
}

State Shutdown {
  > Quit
}

Partition
# Change valve to sample between air going into air into chamber vs air going out of inlet
# Sun, et al. 2016, AMT sampled air going into chamber once per hour for 10 minutes
# Data from 00:30 - 09:30 was only considered due to pressure fluctuation as valve switches

State Valve_Switch{
		> Valve 1 Off
		> Flag Set 50
 +10:00 > Valve 1 On
		> Flag Set 51
 +03:00	> Flag Set 0
		Validate Valve_Switch;
}

State Valve_Switch_Idle{
}


Partition

%{
  double CO2_integral;
  #define CO2_GP (0.1)
  #define CO2_GI (0.2)
  #define CO2_CLIP_LIMIT 200
  #define CO2_INT_LIMIT (CO2_CLIP_LIMIT/CO2_GI)
  #define CO2_SETPOINT (430)
  /* UpdatePeriod = 5; */
%}

State CO2_Idle {}

State CO2_control nolog {
  +10
  { double err_term, rate_adj;
    err_term = (convert(CO2_ppm)-CO2_SETPOINT);
    CO2_integral += err_term;
    if (CO2_integral > CO2_INT_LIMIT)
      CO2_integral = CO2_INT_LIMIT;
    else if (CO2_integral < -CO2_INT_LIMIT)
      CO2_integral = -CO2_INT_LIMIT;
    rate_adj = 60 - err_term * CO2_GP -
      CO2_integral * CO2_GI;
    if (rate_adj > CO2_CLIP_LIMIT)
      rate_adj = CO2_CLIP_LIMIT;
    else if (rate_adj < 0) rate_adj = 0;
    if (rate_adj != FC0_Set)
      ci_sendfcmd(2, "Flow CO2 Set SCCM %.0lf\n", rate_adj);
    Validate CO2_control;
  }
}

Partition

State LCMQ_Test_Idle {}

State LCMQ_Test_Activate {
            > Flow CO2 Set Volts 0
			> Valve 1 Off
			> Flag Set 50
			> Flag2 Set 1
 +10:00     > Valve 1 On
            > Flag Set 51
			> Flag2 Set 2
 +3:00	    > Flow CO2 Set Volts 0.25
			> Valve 1 Off
			> Flag Set 50
			> Flag2 Set 3
 +10:00     > Valve 1 On
            > Flag Set 51
			> Flag2 Set 4
 +3:00	    > Flow CO2 Set Volts 0.5
			> Valve 1 Off
			> Flag Set 50
			> Flag2 Set 5
 +10:00     > Valve 1 On
            > Flag Set 51
			> Flag2 Set 6
 +3:00	    > Flow CO2 Set Volts 0
 	        > Valve 1 Off
			> Flag Set 0
			> Flag2 Set 0
			Validate LCMQ_Test_Idle;
}


Partition
# Automatically start flows and other functions at a specified time of day (such as early morning to allow for equilibration)
# Currently hard-coded for 4:00 in the morning (10:00 UTC)
# ssm is seconds since midnight
# Allows user the ability to set a series of steps for flowing OVOC

State Auto_Start_Flow_Idle{
}

State Auto_Start_Flow_noSteps{
+10 {
  long unixtime;
  long ssm;
  unixtime = itime();
  ssm = unixtime % 86400;

  if (ssm >= 3600*8.0)
	Validate Auto_Start_Flow_Execute_noSteps;
  
  else Validate Auto_Start_Flow_noSteps;
  }
}

State Auto_Start_Flow_Execute_noSteps{
	> Flow CO2 Set Volts 0.11
	Validate Auto_Start_Flow_Idle;
}

State Auto_Start_Flow_withStepsC{
+10 {
  long unixtime;
  long ssm;
  unixtime = itime();
  ssm = unixtime % 86400;

  if (ssm >= 3600*8.0)
	Validate Auto_Start_Flow_Execute_withStepsC;
  
  else Validate Auto_Start_Flow_withStepsC;
  }
}

State Auto_Start_Flow_Execute_withStepsC{
	        > Flow CO2 Set Volts 0.1925
			Validate Valve_Switch;
 +05:45:00  > Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.2475
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.3025
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.055
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.1375
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.09625
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00  > Flow CO2 Set Volts 0
			> Flag Set 0
			> Flag2 Set 0
			Validate Valve_Switch_Idle;
			Validate Auto_Start_Flow_Idle;		
}

State Auto_Start_Flow_withStepsB{
+10 {
  long unixtime;
  long ssm;
  unixtime = itime();
  ssm = unixtime % 86400;

  if (ssm >= 3600*8.0)
	Validate Auto_Start_Flow_Execute_withStepsB;
  
  else Validate Auto_Start_Flow_withStepsB;
  }
}

State Auto_Start_Flow_Execute_withStepsB{
	        > Flow CO2 Set Volts 0.11
			Validate Valve_Switch;
 +05:45:00  > Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.22
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.44
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.66
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.44
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.66
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00  > Flow CO2 Set Volts 0
			> Flag Set 0
			> Flag2 Set 0
			Validate Valve_Switch_Idle;
			Validate Auto_Start_Flow_Idle;		
}


State Auto_Start_Flow_withStepsA{
+10 {
  long unixtime;
  long ssm;
  unixtime = itime();
  ssm = unixtime % 86400;

  if (ssm >= 3600*8.0)
	Validate Auto_Start_Flow_Execute_withStepsA;
  
  else Validate Auto_Start_Flow_withStepsA;
  }
}

State Auto_Start_Flow_Execute_withStepsA{
	        > Flow CO2 Set Volts 0.11
			Validate Valve_Switch;
 +05:45:00  > Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.22
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.44
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.88
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.44
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00	> Flow CO2 Set Volts 0.66
			> Flag2 Set 0
 +01:05:00	> Flag2 Set 30
 +01:15:00  > Flow CO2 Set Volts 0
			> Flag Set 0
			> Flag2 Set 0
			Validate Valve_Switch_Idle;
			Validate Auto_Start_Flow_Idle;		
}

Partition

# This partition and the two following monitor the flow
# controllers and reports if the setpoint and the flow
# don't match.

{
  TM typedef double FC_adV_t;
  FC_adV_t FC0_adV; Invalidate FC0_adV;
  FC_adV_t FC1_adV; Invalidate FC1_adV;
  FC_adV_t FC2_adV; Invalidate FC2_adV;
  depending on (FC0_Set once, FC0_Flow once) {
    double FC_dV;
    FC_dV = convert(FC0_Set) - convert(FC0_Flow);
    FC0_adV = FC_dV >= 0 ? FC_dV : -FC_dV;
    Validate FC0_adV;
  }
  depending on (FC1_Set once, FC1_Flow once) {
    double FC_dV;
    FC_dV = convert(FC1_Set) - convert(FC1_Flow);
    FC1_adV = FC_dV >= 0 ? FC_dV : -FC_dV;
    Validate FC1_adV;
  }
  depending on (FC2_Set once, FC2_Flow once) {
    double FC_dV;
    FC_dV = convert(FC2_Set) - convert(FC2_Flow);
    FC2_adV = FC_dV >= 0 ? FC_dV : -FC_dV;
    Validate FC2_adV;
  }
}

State FC0_Monitor NoLog {
  Hold Until (FC0_adV >= 0.2);
  Hold Until (FC0_adV < 0.2) or 10
  else {
    msg(2, "FC0 flow is not stable: FC0_adV = %.2lf", FC0_adV);
    Validate FC0_Deviating;
  }
  Validate FC0_Monitor;
}

State FC0_Deviating NoLog {
  +0  { ci_sendfcmd(2, "Flow CO2 Set Volts %.2lf\n",
          convert(FC0_Set));
      }
  +1  Hold Until (FC0_adV < 0.2) or 10
      else Validate FC0_Deviating;
  +1  {
        msg(0, "FC0 flow stabilized");
        Validate FC0_Monitor;
      }
}

Partition

State FC1_Monitor NoLog {
  Hold Until (FC1_adV >= 0.2);
  Hold Until (FC1_adV < 0.2) or 10
  else {
    msg(2, "FC1 flow is not stable: FC1_adV = %.2lf", FC1_adV);
    Validate FC1_Deviating;
  }
  Validate FC1_Monitor;
}

State FC1_Deviating NoLog {
  +0  { ci_sendfcmd(2, "Flow OVOC Set Volts %.2lf\n",
          convert(FC1_Set));
      }
  +1  Hold Until (FC1_adV < 0.2) or 10
      else Validate FC1_Deviating;
  +1  {
        msg(0, "FC1 flow stabilized");
        Validate FC1_Monitor;
      }
}

Partition

State FC2_Monitor NoLog {
  Hold Until (FC2_adV >= 0.2);
  Hold Until (FC2_adV < 0.2) or 10
  else {
    msg(2, "FC2 flow is not stable: FC2_adV = %.2lf", FC2_adV);
    Validate FC2_Deviating;
  }
  Validate FC2_Monitor;
}

State FC2_Deviating NoLog {
  +0  { ci_sendfcmd(2, "Flow Zero Set Volts %.2lf\n",
          convert(FC2_Set));
      }
  +1  Hold Until (FC2_adV < 0.2) or 10
      else Validate FC2_Deviating;
  +1  {
        msg(0, "FC2 flow stabilized");
        Validate FC2_Monitor;
      }
}

