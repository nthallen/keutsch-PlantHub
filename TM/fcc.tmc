%{
  /* fcc.tmc: Handles data for the flow controllers:
     0x10 flow0
     0x11 flow1
     0x12 flow2
     0x13 flow3 -not present
     0x14 FLSET0
     0x15 FLSET1
     0x16 FLSET2
     0x17 FLSET3 -not present
     0x18 CmdStatus
     0x19 ADC_U2_T
     0x1A ADC_U3_T
     
     For the Plant Chamber:
     Flow 0 is CO2 200 SCCM
     Flow 1 is OVOC 500 SCCM
     Flow 2 is Zero 5000 SCCM
     Flow 3 is unused
     
     Additional addresses will be added to support CO2, temperature and RH measurements
   */
%}
TM typedef double FCC_Volts;
TM typedef unsigned char FCC_status_t { text "%3d"; }
TM typedef signed short FCC_ADC_t { text "%6.4lf"; convert FCC_Volts; }
TM typedef unsigned short FCC_DAC_t { text "%6.4lf"; convert FCC_Volts; }
Calibration (FCC_ADC_t, FCC_Volts) { 0, 0, 32768, 6.144 }
Calibration (FCC_DAC_t, FCC_Volts) { 0, 0, 65536, 5 }

TM typedef double FCC_SCCM;
TM typedef FCC_ADC_t FCC_ADC_10_SCCM { text "%6.3lf"; convert FCC_SCCM; }
Calibration (FCC_ADC_10_SCCM,FCC_SCCM) { 0, 0, 26666.67, 10}
TM typedef FCC_ADC_t FCC_ADC_200_SCCM { text "%6.3lf"; convert FCC_SCCM; }
Calibration (FCC_ADC_200_SCCM,FCC_SCCM) { 0, 0, 26666.67, 200}
TM typedef FCC_ADC_t FCC_ADC_500_SCCM { text "%6.2lf"; convert FCC_SCCM; }
Calibration (FCC_ADC_500_SCCM,FCC_SCCM) { 0, 0, 26666.67, 500}
TM typedef FCC_ADC_t FCC_ADC_5000_SCCM { text "%6.1lf"; convert FCC_SCCM; }
Calibration (FCC_ADC_5000_SCCM,FCC_SCCM) { 0, 0, 26666.67, 5000}
TM typedef FCC_ADC_t FCC_ADC_10000_SCCM { text "%6.0lf"; convert FCC_SCCM; }
Calibration (FCC_ADC_10000_SCCM,FCC_SCCM) { 0, 0, 26666.67, 10000}

TM typedef FCC_DAC_t FCC_DAC_10_SCCM { text "%6.3lf"; convert FCC_SCCM; }
Calibration (FCC_DAC_10_SCCM,FCC_SCCM) { 0, 0, 65536, 10}
TM typedef FCC_DAC_t FCC_DAC_200_SCCM { text "%6.3lf"; convert FCC_SCCM; }
Calibration (FCC_DAC_200_SCCM,FCC_SCCM) { 0, 0, 65536, 200}
TM typedef FCC_DAC_t FCC_DAC_500_SCCM { text "%6.2lf"; convert FCC_SCCM; }
Calibration (FCC_DAC_500_SCCM,FCC_SCCM) { 0, 0, 65536, 500}
TM typedef FCC_DAC_t FCC_DAC_5000_SCCM { text "%6.1lf"; convert FCC_SCCM; }
Calibration (FCC_DAC_5000_SCCM,FCC_SCCM) { 0, 0, 65536, 5000}
TM typedef FCC_DAC_t FCC_DAC_10000_SCCM { text "%6.0lf"; convert FCC_SCCM; }
Calibration (FCC_DAC_10000_SCCM,FCC_SCCM) { 0, 0, 65536, 10000}

TM 1 Hz FCC_ADC_t FC0_Flow;
TM 1 Hz FCC_ADC_t FC1_Flow;
TM 1 Hz FCC_ADC_t FC2_Flow;
TM 1 Hz FCC_ADC_t FCC_U2_T;
TM 1 Hz FCC_ADC_t FCC_U3_T;
TM 1 Hz FCC_DAC_t FC0_Set;
TM 1 Hz FCC_DAC_t FC1_Set;
TM 1 Hz FCC_DAC_t FC2_Set;
TM 1 Hz FCC_status_t FCC0_Status;

Group fcc (FC0_Flow, FC1_Flow, FC2_Flow, FCC_U2_T, FCC_U3_T,
            FC0_Set, FC1_Set, FC2_Set, FCC0_Status) {
  unsigned short data[9];
  if (FCC0_collect(data) >= 0) {
    FC0_Flow = data[0];
    FC1_Flow = data[1];
    FC2_Flow = data[2];
    FC0_Set = data[3];
    FC1_Set = data[4];
    FC2_Set = data[5];
    FCC_U2_T = data[6];
    FCC_U3_T = data[7];
    FCC0_Status = data[8];
  }
}

TM typedef unsigned short I2C_word { text "%5u"; }
TM typedef double TS_CELCIUS;
TM typedef unsigned long I2C_TS_T_t { text "%.2lf"; convert TS_CELCIUS; }
TM typedef unsigned char I2C_byte { text "%3u"; }
TM typedef I2C_word I2C_hexword { text "%04X"; }
TM typedef I2C_word SHT31_Temp_t { text "%6.2lf"; convert TS_CELCIUS; }
Calibration (SHT31_Temp_t, TS_CELCIUS) {
  0, -45, 65535, 130
}

TM typedef double RH_t;
TM typedef I2C_word SHT31_RH_t { text "%6.2lf"; convert RH_t; }
Calibration (SHT31_RH_t, RH_t) {
  0, 0, 65535, 100
}

TM 1 Hz I2C_word TS_Addr;
TM 1 Hz I2C_word TS_Count;
TM 1 Hz I2C_TS_T_t TS_Temp;
TM 1 Hz I2C_byte TS_state;
TM 1 Hz I2C_byte TS_error;
TM 1 Hz I2C_byte TS_ovflow;
TM 1 Hz I2C_hexword SHT31_Status;
TM 1 Hz SHT31_Temp_t SHT31_Temp;
TM 1 Hz SHT31_RH_t SHT31_RH;
TM 1 Hz I2C_byte SHT31_I2C_err;
TM 1 Hz I2C_byte SHT31_state;
TM 1 Hz I2C_byte SHT31_CRC_err;

Group i2c (TS_Addr, TS_Count, TS_Temp, TS_error, TS_state,
    TS_ovflow, SHT31_Status, SHT31_Temp, SHT31_RH,
    SHT31_I2C_err, SHT31_state, SHT31_CRC_err) {
  unsigned short data[9];
  if (I2C_collect(data) >= 0) {
    TS_Addr = data[0];
    TS_Count = data[1];
    TS_Temp = data[2] + (data[3] << 16);
    TS_error = data[4] & 0xF;
    TS_state = (data[4] & 0x70) >> 4;
    TS_ovflow = data[4] >> 8;
    SHT31_Status = data[5];
    SHT31_Temp = data[6];
    SHT31_RH = data[7];
    SHT31_I2C_err = data[8] & 0xF;
    SHT31_state = (data[8] >> 4) & 0xF;
    SHT31_CRC_err = data[8] >> 8;
  }
}

